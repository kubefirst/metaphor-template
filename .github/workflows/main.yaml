name:  Release Main
env:
  ARGO_NAMESPACE: argo
  ARGO_VERSION: v3.1.11
# this needs to be a template
  GITREPO_URL: ssh://git@<GITHUB_HOST>/<GITHUB_OWNER>/metaphor-frontend.git
  CI_PROJECT_NAME: metaphor-frontend

# To confirm this logic
# There is circular effect due to the bump of version
# To confirm Effect

on:
 push:
   branches:
     - main

jobs:
  publish:
    runs-on: self-hosted
    steps:
      - name: Define Arch arm64
        if: "${{ runner.arch == 'ARM64' }}"
        shell: bash
        run: |
          echo "Setting arch to ARM64"
          ARCH=arm64
          echo "ARCH=$ARCH" >> $GITHUB_ENV
      - name: Define Arch amd64
        if: "${{ runner.arch == 'X64' }}"
        shell: bash
        run: |
          echo "Setting arch to amd64"
          ARCH=amd64
          echo "ARCH=$ARCH" >> $GITHUB_ENV    
      - name: Setup Runner for Argo
        env: 
          ARCH: ${{ env.ARCH }}
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-$ARCH.gz
            # Unzip
            gunzip argo-linux-$ARCH.gz
            # Make binary executable
            chmod +x argo-linux-$ARCH
            # Move binary to path
            sudo mv ./argo-linux-$ARCH /usr/local/bin/argo
            # Test installation
            argo version --short    
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo ${GITHUB_REPOSITORY}        
      - run: echo ${GITHUB_REPOSITORY#*/}
      - run: echo ${GITHUB_SERVER_URL:8}
      - run: echo ${GITREPO_URL}     
      - name: publish
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short   
          argo submit .argo/publish.yaml \
            --generate-name="${CI_PROJECT_NAME}-publish-${GITHUB_SHA:7}" \
            --serviceaccount=argo \
            -p appName="${CI_PROJECT_NAME}" \
            -p ciCommitSha="${GITHUB_SHA}" \
            -p branch="${GITHUB_REF_NAME}" \
            -p gitRepoUrl="${GITREPO_URL}" \
            -p shortSha="${GITHUB_SHA:7}" \
            -p dockerFilePath="build/Dockerfile" \
            --wait --log
      - run: echo "üçè This job's status is ${{ job.status }}."              
  development:
    needs: publish
    runs-on: self-hosted
    steps:
      - name: Define Arch arm64
        if: "${{ runner.arch == 'ARM64' }}"
        shell: bash
        run: |
          echo "Setting arch to ARM64"
          ARCH=arm64
          echo "ARCH=$ARCH" >> $GITHUB_ENV
      - name: Define Arch amd64
        if: "${{ runner.arch == 'X64' }}"
        shell: bash
        run: |
          echo "Setting arch to amd64"
          ARCH=amd64
          echo "ARCH=$ARCH" >> $GITHUB_ENV    
      - name: Setup Runner for Argo
        env: 
          ARCH: ${{ env.ARCH }}
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-$ARCH.gz
            # Unzip
            gunzip argo-linux-$ARCH.gz
            # Make binary executable
            chmod +x argo-linux-$ARCH
            # Move binary to path
            sudo mv ./argo-linux-$ARCH /usr/local/bin/argo
            # Test installation
            argo version --short        
      - name: Check out repository code
        uses: actions/checkout@v3            
      - name: development
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short   
          argo submit .argo/deploy.yaml \
            --generate-name="${CI_PROJECT_NAME}-development-${GITHUB_SHA:7}" \
            --serviceaccount=argo \
            -p appName="${CI_PROJECT_NAME}" \
            -p ciCommitSha="${GITHUB_SHA}" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="development" \
            -p gitRepoUrl="${GITREPO_URL}" \
            -p shortSha="${GITHUB_SHA:7}" \
            --wait --log  
      - run: echo "üçè This job's status is ${{ job.status }}."              
  staging:
    needs: development
    runs-on: self-hosted
    steps:
      - name: Define Arch arm64
        if: "${{ runner.arch == 'ARM64' }}"
        shell: bash
        run: |
          echo "Setting arch to ARM64"
          ARCH=arm64
          echo "ARCH=$ARCH" >> $GITHUB_ENV
      - name: Define Arch amd64
        if: "${{ runner.arch == 'X64' }}"
        shell: bash
        run: |
          echo "Setting arch to amd64"
          ARCH=amd64
          echo "ARCH=$ARCH" >> $GITHUB_ENV    
      - name: Setup Runner for Argo
        env: 
          ARCH: ${{ env.ARCH }}
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-$ARCH.gz
            # Unzip
            gunzip argo-linux-$ARCH.gz
            # Make binary executable
            chmod +x argo-linux-$ARCH
            # Move binary to path
            sudo mv ./argo-linux-$ARCH /usr/local/bin/argo
            # Test installation
            argo version --short         
      - name: Check out repository code
        uses: actions/checkout@v3              
      - name: staging
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short   
          argo submit .argo/deploy.yaml \
            --generate-name="${CI_PROJECT_NAME}-staging-${GITHUB_SHA:7}" \
            --serviceaccount=argo \
            -p appName="${CI_PROJECT_NAME}" \
            -p ciCommitSha="${GITHUB_SHA}" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="staging" \
            -p gitRepoUrl="${GITREPO_URL}" \
            -p shortSha="${GITHUB_SHA:7}" \
            --wait --log   
      - run: echo "üçè This job's status is ${{ job.status }}."              
  release:
    needs: staging  
    runs-on: self-hosted
    steps:
      - name: Define Arch arm64
        if: "${{ runner.arch == 'ARM64' }}"
        shell: bash
        run: |
          echo "Setting arch to ARM64"
          ARCH=arm64
          echo "ARCH=$ARCH" >> $GITHUB_ENV
      - name: Define Arch amd64
        if: "${{ runner.arch == 'X64' }}"
        shell: bash
        run: |
          echo "Setting arch to amd64"
          ARCH=amd64
          echo "ARCH=$ARCH" >> $GITHUB_ENV    
      - name: Setup Runner for Argo
        env: 
          ARCH: ${{ env.ARCH }}
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-$ARCH.gz
            # Unzip
            gunzip argo-linux-$ARCH.gz
            # Make binary executable
            chmod +x argo-linux-$ARCH
            # Move binary to path
            sudo mv ./argo-linux-$ARCH /usr/local/bin/argo
            # Test installation
            argo version --short          
      - name: Check out repository code
        uses: actions/checkout@v3                    
      - name: release
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short   
          argo submit .argo/release.yaml \
            --generate-name="${CI_PROJECT_NAME}-release-${GITHUB_SHA:7}" \
            --serviceaccount=argo \
            -p appName="${CI_PROJECT_NAME}" \
            -p ciCommitSha="${GITHUB_SHA}" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="production" \
            -p gitRepoUrl="${GITREPO_URL}" \
            -p gitRepoPath="${GITREPO_URL}" \
            -p shortSha="${GITHUB_SHA:7}" \
            --wait --log              
      - run: echo "üçè This job's status is ${{ job.status }}."  
